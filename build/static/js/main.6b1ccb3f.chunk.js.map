{"version":3,"sources":["components/PostsList.js","components/PostShow.js","components/Redditer.js","App.js","serviceWorker.js","index.js"],"names":["Post","styled","li","props","visited","PostsList","posts","setActivePost","map","post","creationDate","moment","created","format","onClick","author_fullname","src","thumbnail","title","num_comments","PostsShow","activePost","Redditer","useState","setPosts","useEffect","fetch","then","res","json","postsRes","data","children","PostShow","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"iVAIA,IAAMA,E,KAAOC,EAAOC,GAAV,KACc,SAAAC,GAAK,OAAIA,EAAMC,QAAU,OAAS,UAkC3CC,EA/BG,SAAC,GAA8B,IAA5BC,EAA2B,EAA3BA,MAAOC,EAAoB,EAApBA,cACxB,OACI,6BACI,4BAEQD,EAAME,KAAI,SAAAC,GACN,IAAMC,EAAeC,IAAOF,EAAKG,SAASC,OAAO,uBAEjD,OACI,kBAACb,EAAD,CAAMI,QAASK,EAAKL,QAASU,QAAS,WAAOP,EAAcE,KACvD,4BAAKA,EAAKM,gBAAiBL,GAC3B,6BACI,yBAAKM,IAAKP,EAAKQ,YADnB,IACkCR,EAAKS,OAEvC,6BACI,yCAGA,8BACKT,EAAKU,aADV,qBChBrBC,EARG,SAAC,GAAoB,IAAlBC,EAAiB,EAAjBA,WACjB,OACI,6BACKA,EAAWN,gBADhB,MACoCM,EAAWH,QC2BxCI,EA3BE,WAAO,IAAD,EACOC,mBAAS,IADhB,mBACZjB,EADY,KACLkB,EADK,OAEiBD,mBAAS,IAF1B,mBAEZF,EAFY,KAEAd,EAFA,KAmBnB,OAfAkB,qBAAU,WACNC,MAAM,mCACDC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GACFN,EAASM,EAASC,KAAKC,SAASxB,KAAI,SAAAC,GAAI,MAAK,CACzCS,MAAOT,EAAKsB,KAAKb,MACjBH,gBAAiBN,EAAKsB,KAAKhB,gBAC3BH,QAASH,EAAKsB,KAAKnB,QACnBK,UAAWR,EAAKsB,KAAKd,UACrBE,aAAcV,EAAKsB,KAAKZ,aACxBf,QAASK,EAAKsB,KAAK3B,kBAGhC,IAGC,oCACI,kBAAC6B,EAAD,CAAUZ,WAAYA,IACtB,kBAAC,EAAD,CAAWf,MAAOA,EAAOC,cAAeA,MCjBrC2B,EANH,WACV,OACE,kBAAC,EAAD,OCMgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBpB,MAAK,SAAAqB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.6b1ccb3f.chunk.js","sourcesContent":["import React from 'react';\r\nimport moment from 'moment';\r\nimport styled from 'styled-components';\r\n\r\nconst Post = styled.li`\r\n    background-color: ${props => props.visited ? \"#000\" : \"#555\"}\r\n`;\r\n\r\nconst PostsList = ({ posts, setActivePost }) => {\r\n    return (\r\n        <div>\r\n            <ul>\r\n                {\r\n                    posts.map(post => {\r\n                        const creationDate = moment(post.created).format('DD-MM-YYYY HH:mm:ss');\r\n\r\n                        return (\r\n                            <Post visited={post.visited} onClick={() => {setActivePost(post)}}>\r\n                                <h4>{post.author_fullname}{creationDate}</h4>\r\n                                <div>\r\n                                    <img src={post.thumbnail} /> {post.title}\r\n                                </div>\r\n                                <div>\r\n                                    <span>\r\n                                        Dismiss\r\n                                    </span>\r\n                                    <span>\r\n                                        {post.num_comments} comments\r\n                                    </span>\r\n                                </div>\r\n                            </Post>\r\n                        )\r\n                    })\r\n                }\r\n            </ul>\r\n        </div>\r\n    );\r\n}\r\n \r\nexport default PostsList;","import React from 'react';\r\n\r\nconst PostsShow = ({ activePost }) => {\r\n    return (\r\n        <div>\r\n            {activePost.author_fullname} - {activePost.title}\r\n        </div>\r\n    );\r\n}\r\n \r\nexport default PostsShow;","import React, { useState, useEffect } from 'react';\r\n\r\nimport PostsList from './PostsList';\r\nimport PostShow from './PostShow';\r\n\r\nconst Redditer = () => {\r\n    const [posts, setPosts] = useState([]);\r\n    const [activePost, setActivePost] = useState([]);\r\n\r\n    useEffect(() => {\r\n        fetch(\"https://www.reddit.com/top.json\")\r\n            .then(res => res.json())\r\n            .then(postsRes => {\r\n                setPosts(postsRes.data.children.map(post => ({\r\n                    title: post.data.title,\r\n                    author_fullname: post.data.author_fullname,\r\n                    created: post.data.created,\r\n                    thumbnail: post.data.thumbnail,\r\n                    num_comments: post.data.num_comments,\r\n                    visited: post.data.visited\r\n                })));\r\n            });\r\n    }, []);\r\n\r\n    return (\r\n        <>\r\n            <PostShow activePost={activePost} />\r\n            <PostsList posts={posts} setActivePost={setActivePost} />\r\n        </>\r\n    );\r\n}\r\n \r\nexport default Redditer;","import React from 'react';\n\nimport Redditer from './components/Redditer.js';\n\nconst App = () => {\n  return (\n    <Redditer />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}